// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SaySomething struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaySomething) Reset()         { *m = SaySomething{} }
func (m *SaySomething) String() string { return proto.CompactTextString(m) }
func (*SaySomething) ProtoMessage()    {}
func (*SaySomething) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{0}
}

func (m *SaySomething) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaySomething.Unmarshal(m, b)
}
func (m *SaySomething) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaySomething.Marshal(b, m, deterministic)
}
func (m *SaySomething) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaySomething.Merge(m, src)
}
func (m *SaySomething) XXX_Size() int {
	return xxx_messageInfo_SaySomething.Size(m)
}
func (m *SaySomething) XXX_DiscardUnknown() {
	xxx_messageInfo_SaySomething.DiscardUnknown(m)
}

var xxx_messageInfo_SaySomething proto.InternalMessageInfo

func (m *SaySomething) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HearBack struct {
	Message              string               `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	HappenedAt           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=HappenedAt,proto3" json:"HappenedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HearBack) Reset()         { *m = HearBack{} }
func (m *HearBack) String() string { return proto.CompactTextString(m) }
func (*HearBack) ProtoMessage()    {}
func (*HearBack) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{1}
}

func (m *HearBack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HearBack.Unmarshal(m, b)
}
func (m *HearBack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HearBack.Marshal(b, m, deterministic)
}
func (m *HearBack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HearBack.Merge(m, src)
}
func (m *HearBack) XXX_Size() int {
	return xxx_messageInfo_HearBack.Size(m)
}
func (m *HearBack) XXX_DiscardUnknown() {
	xxx_messageInfo_HearBack.DiscardUnknown(m)
}

var xxx_messageInfo_HearBack proto.InternalMessageInfo

func (m *HearBack) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HearBack) GetHappenedAt() *timestamp.Timestamp {
	if m != nil {
		return m.HappenedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*SaySomething)(nil), "rpc.SaySomething")
	proto.RegisterType((*HearBack)(nil), "rpc.HearBack")
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_08134aea513e0001) }

var fileDescriptor_08134aea513e0001 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xce, 0xc1, 0x8b, 0x82, 0x40,
	0x14, 0xc7, 0xf1, 0x75, 0x17, 0xd6, 0xdd, 0x67, 0x1d, 0x9a, 0x93, 0x78, 0x49, 0x3c, 0x79, 0x69,
	0x04, 0xbb, 0x45, 0x97, 0x82, 0xc0, 0x4b, 0x17, 0xed, 0x0f, 0x68, 0x9c, 0x9e, 0xa3, 0xa4, 0xce,
	0x30, 0x4e, 0x41, 0xff, 0x7d, 0xa0, 0x0c, 0x78, 0xe9, 0xf8, 0x7e, 0x7c, 0x79, 0x7c, 0x00, 0x90,
	0xd7, 0x92, 0x2a, 0x2d, 0x8d, 0x24, 0x3f, 0x5a, 0xf1, 0x60, 0x2d, 0xa4, 0x14, 0x2d, 0x26, 0xe3,
	0x54, 0x3e, 0xaa, 0xc4, 0x34, 0x1d, 0x0e, 0x86, 0x75, 0x6a, 0xaa, 0xa2, 0x18, 0x16, 0x05, 0x7b,
	0x15, 0xb2, 0x43, 0x53, 0x37, 0xbd, 0x20, 0x3e, 0xb8, 0x67, 0x1c, 0x06, 0x26, 0xd0, 0x77, 0x42,
	0x27, 0xfe, 0xcf, 0xed, 0x19, 0x5d, 0xe1, 0x2f, 0x43, 0xa6, 0x8f, 0x8c, 0xdf, 0x3f, 0x57, 0x64,
	0x07, 0x90, 0x31, 0xa5, 0xb0, 0xc7, 0xdb, 0xc1, 0xf8, 0xdf, 0xa1, 0x13, 0x7b, 0x69, 0x40, 0x27,
	0x05, 0xb5, 0x0a, 0x7a, 0xb1, 0x8a, 0x7c, 0x56, 0xa7, 0x7b, 0xf0, 0x4e, 0xbc, 0x96, 0x05, 0xea,
	0x67, 0xc3, 0x91, 0x6c, 0xc0, 0xcd, 0xb1, 0x6a, 0x91, 0x1b, 0xb2, 0xa2, 0x5a, 0x71, 0x3a, 0x87,
	0x06, 0xcb, 0x71, 0xb2, 0xa2, 0xe8, 0xab, 0xfc, 0x1d, 0xbf, 0x6f, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x71, 0xa3, 0x5d, 0x6a, 0x04, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Reflect(ctx context.Context, in *SaySomething, opts ...grpc.CallOption) (*HearBack, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Reflect(ctx context.Context, in *SaySomething, opts ...grpc.CallOption) (*HearBack, error) {
	out := new(HearBack)
	err := c.cc.Invoke(ctx, "/rpc.EchoService/Reflect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Reflect(context.Context, *SaySomething) (*HearBack, error)
}

// UnimplementedEchoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (*UnimplementedEchoServiceServer) Reflect(ctx context.Context, req *SaySomething) (*HearBack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reflect not implemented")
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Reflect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaySomething)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Reflect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.EchoService/Reflect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Reflect(ctx, req.(*SaySomething))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reflect",
			Handler:    _EchoService_Reflect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}
